// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pob/abci/v1/auction.proto

package abci

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// AuctionInfo contains information about the top of block auction
// that was run at the end of the previous block using vote extensions.
type AuctionInfo struct {
	// extended_commit_info contains the vote extensions that were used to run the auction.
	ExtendedCommitInfo []byte `protobuf:"bytes,1,opt,name=extended_commit_info,json=extendedCommitInfo,proto3" json:"extended_commit_info,omitempty"`
	// max_tx_bytes is the maximum number of bytes that were allowed for the proposal.
	MaxTxBytes int64 `protobuf:"varint,2,opt,name=max_tx_bytes,json=maxTxBytes,proto3" json:"max_tx_bytes,omitempty"`
	// num_txs is the number of transactions that were included in the proposal.
	NumTxs uint64 `protobuf:"varint,3,opt,name=num_txs,json=numTxs,proto3" json:"num_txs,omitempty"`
}

func (m *AuctionInfo) Reset()         { *m = AuctionInfo{} }
func (m *AuctionInfo) String() string { return proto.CompactTextString(m) }
func (*AuctionInfo) ProtoMessage()    {}
func (*AuctionInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea32f9b647554bf5, []int{0}
}
func (m *AuctionInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuctionInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuctionInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuctionInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuctionInfo.Merge(m, src)
}
func (m *AuctionInfo) XXX_Size() int {
	return m.Size()
}
func (m *AuctionInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_AuctionInfo.DiscardUnknown(m)
}

var xxx_messageInfo_AuctionInfo proto.InternalMessageInfo

func (m *AuctionInfo) GetExtendedCommitInfo() []byte {
	if m != nil {
		return m.ExtendedCommitInfo
	}
	return nil
}

func (m *AuctionInfo) GetMaxTxBytes() int64 {
	if m != nil {
		return m.MaxTxBytes
	}
	return 0
}

func (m *AuctionInfo) GetNumTxs() uint64 {
	if m != nil {
		return m.NumTxs
	}
	return 0
}

// VoteExtensionInfo contains information about a vote extension that was used to run the auction. We
// include multiple vote extensions internally in case other applications want to define their own
// vote extensions data.
type VoteExtensionInfo struct {
	// registry is the data of the vote extension. This is a map of the vote extension
	// name to the data of the vote extension.
	Registry map[string][]byte `protobuf:"bytes,2,rep,name=registry,proto3" json:"registry,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *VoteExtensionInfo) Reset()         { *m = VoteExtensionInfo{} }
func (m *VoteExtensionInfo) String() string { return proto.CompactTextString(m) }
func (*VoteExtensionInfo) ProtoMessage()    {}
func (*VoteExtensionInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea32f9b647554bf5, []int{1}
}
func (m *VoteExtensionInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VoteExtensionInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VoteExtensionInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VoteExtensionInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VoteExtensionInfo.Merge(m, src)
}
func (m *VoteExtensionInfo) XXX_Size() int {
	return m.Size()
}
func (m *VoteExtensionInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_VoteExtensionInfo.DiscardUnknown(m)
}

var xxx_messageInfo_VoteExtensionInfo proto.InternalMessageInfo

func (m *VoteExtensionInfo) GetRegistry() map[string][]byte {
	if m != nil {
		return m.Registry
	}
	return nil
}

func init() {
	proto.RegisterType((*AuctionInfo)(nil), "skipmev.pob.abci.v1.AuctionInfo")
	proto.RegisterType((*VoteExtensionInfo)(nil), "skipmev.pob.abci.v1.VoteExtensionInfo")
	proto.RegisterMapType((map[string][]byte)(nil), "skipmev.pob.abci.v1.VoteExtensionInfo.RegistryEntry")
}

func init() { proto.RegisterFile("pob/abci/v1/auction.proto", fileDescriptor_ea32f9b647554bf5) }

var fileDescriptor_ea32f9b647554bf5 = []byte{
	// 316 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0xcf, 0x4a, 0xc3, 0x30,
	0x00, 0xc6, 0x97, 0x55, 0xa7, 0x66, 0x13, 0xb4, 0x0e, 0xac, 0x22, 0xa5, 0xec, 0xd4, 0x8b, 0xa9,
	0x53, 0x11, 0xd1, 0x93, 0x93, 0x1d, 0xbc, 0x49, 0x18, 0x1e, 0xbc, 0x94, 0xa6, 0xcb, 0x66, 0x98,
	0x49, 0x4a, 0x93, 0x96, 0xd4, 0xa7, 0xf0, 0x19, 0x7c, 0x1a, 0x8f, 0x3b, 0x7a, 0x94, 0xed, 0x45,
	0xa4, 0x9d, 0x15, 0x44, 0x6f, 0x49, 0xbe, 0x3f, 0xfc, 0xf2, 0xc1, 0x83, 0x44, 0x92, 0x20, 0x22,
	0x31, 0x0b, 0xf2, 0x7e, 0x10, 0x65, 0xb1, 0x66, 0x52, 0xa0, 0x24, 0x95, 0x5a, 0xda, 0x7b, 0x6a,
	0xc6, 0x12, 0x4e, 0x73, 0x94, 0x48, 0x82, 0x4a, 0x0b, 0xca, 0xfb, 0xbd, 0x17, 0xd8, 0xbe, 0x59,
	0xb9, 0xee, 0xc4, 0x44, 0xda, 0x27, 0xb0, 0x4b, 0x8d, 0xa6, 0x62, 0x4c, 0xc7, 0x61, 0x2c, 0x39,
	0x67, 0x3a, 0x64, 0x62, 0x22, 0x1d, 0xe0, 0x01, 0xbf, 0x83, 0xed, 0x5a, 0xbb, 0xad, 0xa4, 0x2a,
	0xe1, 0xc1, 0x0e, 0x8f, 0x4c, 0xa8, 0x4d, 0x48, 0x0a, 0x4d, 0x95, 0xd3, 0xf4, 0x80, 0x6f, 0x61,
	0xc8, 0x23, 0x33, 0x32, 0x83, 0xf2, 0xc5, 0xde, 0x87, 0x1b, 0x22, 0xe3, 0xa1, 0x36, 0xca, 0xb1,
	0x3c, 0xe0, 0xaf, 0xe1, 0x96, 0xc8, 0xf8, 0xc8, 0xa8, 0xde, 0x1b, 0x80, 0xbb, 0x0f, 0x52, 0xd3,
	0x61, 0xd9, 0xaa, 0x6a, 0x84, 0x7b, 0xb8, 0x99, 0xd2, 0x29, 0x53, 0x3a, 0x2d, 0x9c, 0xa6, 0x67,
	0xf9, 0xed, 0xd3, 0x73, 0xf4, 0x0f, 0x39, 0xfa, 0x93, 0x44, 0xf8, 0x3b, 0x36, 0x14, 0x3a, 0x2d,
	0xf0, 0x4f, 0xcb, 0xe1, 0x35, 0xdc, 0xfe, 0x25, 0xd9, 0x3b, 0xd0, 0x9a, 0xd1, 0xa2, 0xfa, 0xd4,
	0x16, 0x2e, 0x8f, 0x76, 0x17, 0xae, 0xe7, 0xd1, 0x73, 0x46, 0x2b, 0xfc, 0x0e, 0x5e, 0x5d, 0xae,
	0x9a, 0x97, 0x60, 0x70, 0xf1, 0xbe, 0x70, 0xc1, 0x7c, 0xe1, 0x82, 0xcf, 0x85, 0x0b, 0x5e, 0x97,
	0x6e, 0x63, 0xbe, 0x74, 0x1b, 0x1f, 0x4b, 0xb7, 0xf1, 0x78, 0x34, 0x65, 0xfa, 0x29, 0x23, 0x28,
	0x96, 0x3c, 0x28, 0x01, 0x8f, 0x39, 0xcd, 0x83, 0x7a, 0x7e, 0xd2, 0xaa, 0x46, 0x3f, 0xfb, 0x0a,
	0x00, 0x00, 0xff, 0xff, 0x4c, 0xb5, 0xb6, 0x00, 0x91, 0x01, 0x00, 0x00,
}

func (m *AuctionInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuctionInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuctionInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NumTxs != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.NumTxs))
		i--
		dAtA[i] = 0x18
	}
	if m.MaxTxBytes != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.MaxTxBytes))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ExtendedCommitInfo) > 0 {
		i -= len(m.ExtendedCommitInfo)
		copy(dAtA[i:], m.ExtendedCommitInfo)
		i = encodeVarintAuction(dAtA, i, uint64(len(m.ExtendedCommitInfo)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VoteExtensionInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VoteExtensionInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VoteExtensionInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Registry) > 0 {
		for k := range m.Registry {
			v := m.Registry[k]
			baseI := i
			if len(v) > 0 {
				i -= len(v)
				copy(dAtA[i:], v)
				i = encodeVarintAuction(dAtA, i, uint64(len(v)))
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintAuction(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintAuction(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintAuction(dAtA []byte, offset int, v uint64) int {
	offset -= sovAuction(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AuctionInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ExtendedCommitInfo)
	if l > 0 {
		n += 1 + l + sovAuction(uint64(l))
	}
	if m.MaxTxBytes != 0 {
		n += 1 + sovAuction(uint64(m.MaxTxBytes))
	}
	if m.NumTxs != 0 {
		n += 1 + sovAuction(uint64(m.NumTxs))
	}
	return n
}

func (m *VoteExtensionInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Registry) > 0 {
		for k, v := range m.Registry {
			_ = k
			_ = v
			l = 0
			if len(v) > 0 {
				l = 1 + len(v) + sovAuction(uint64(len(v)))
			}
			mapEntrySize := 1 + len(k) + sovAuction(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovAuction(uint64(mapEntrySize))
		}
	}
	return n
}

func sovAuction(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAuction(x uint64) (n int) {
	return sovAuction(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AuctionInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuctionInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuctionInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtendedCommitInfo", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtendedCommitInfo = append(m.ExtendedCommitInfo[:0], dAtA[iNdEx:postIndex]...)
			if m.ExtendedCommitInfo == nil {
				m.ExtendedCommitInfo = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxTxBytes", wireType)
			}
			m.MaxTxBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxTxBytes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumTxs", wireType)
			}
			m.NumTxs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumTxs |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAuction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VoteExtensionInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VoteExtensionInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VoteExtensionInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Registry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Registry == nil {
				m.Registry = make(map[string][]byte)
			}
			var mapkey string
			mapvalue := []byte{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAuction
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAuction
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthAuction
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthAuction
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapbyteLen uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAuction
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapbyteLen |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intMapbyteLen := int(mapbyteLen)
					if intMapbyteLen < 0 {
						return ErrInvalidLengthAuction
					}
					postbytesIndex := iNdEx + intMapbyteLen
					if postbytesIndex < 0 {
						return ErrInvalidLengthAuction
					}
					if postbytesIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = make([]byte, mapbyteLen)
					copy(mapvalue, dAtA[iNdEx:postbytesIndex])
					iNdEx = postbytesIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipAuction(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthAuction
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Registry[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAuction(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAuction
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAuction
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAuction
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAuction
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAuction        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAuction          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAuction = fmt.Errorf("proto: unexpected end of group")
)
